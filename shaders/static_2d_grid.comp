#version 450

#ifndef _UPDATE_PROC_
    #define _UPDATE_PROC_ 
#endif

#ifndef _CELL_TYPE_DEFINITION_
    #define _CELL_TYPE_DEFINITION_ 
#endif

#ifndef _CELL_TYPE_
    #define _CELL_TYPE_ uint 
#endif

#ifndef _CELL_TYPE_DEFAULT_VALUE_
    #define _CELL_TYPE_DEFAULT_VALUE_ 0 
#endif

// === Struct definitions ===

// Custom cell type (if not uint)
_CELL_TYPE_DEFINITION_

// === Layout information ===

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(push_constant) uniform GridSize {
	uint width;
	uint height;
    uint margin;
} grid_info;

layout(set = 0, binding = 0) buffer readonly InputGrid {
    _CELL_TYPE_ data[];
} input_grid;

layout(set = 0, binding = 1) buffer writeonly OutputGrid {
    _CELL_TYPE_ data[];
} output_grid;

struct Neighbor2D {
    int x_offset;
    int y_offset;
};

// === Update procedure ===

// Index in grid (with margin) of cell handled by the current shader invocation (might be out-of-bounds)
uint idx = (gl_GlobalInvocationID.x + grid_info.margin) + (gl_GlobalInvocationID.y + grid_info.margin) * (grid_info.width + 2 * grid_info.margin);

// Used for neighbor index calculation
int line_width_with_margin = int(grid_info.margin + grid_info.width);

// Returns the current state of a cell's neighbor
_CELL_TYPE_ neighbor(Neighbor2D nbor) {
    int offset = nbor.x_offset + nbor.y_offset * line_width_with_margin;
    if (offset < 0) {
        return input_grid.data[idx - abs(offset)];
    } else {
        return input_grid.data[idx + uint(offset)];
    }
}

// Update function, relative to the automaton under consideration
_CELL_TYPE_ update(_CELL_TYPE_ state) {
    _CELL_TYPE_ new_state = _CELL_TYPE_DEFAULT_VALUE_;
    _UPDATE_PROC_
    return new_state;
}

void main() {
    // TODO incorrect when layot != (1, 1, 1)
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    
    // Out-of-bounds check due to (1) grid margin, and (2) dispatch layout
    if (x >= grid_info.margin && x < grid_info.margin + grid_info.width && 
        y >= grid_info.margin && y < grid_info.margin + grid_info.height) {
            uint state = input_grid.data[idx];
            output_grid.data[idx] = update(state);     
    }
}
